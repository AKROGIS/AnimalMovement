# ---------------------------------------------------------------------------
# go1.py
# Created on: Fri Jul 02 2010 12:30:45 PM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Problems:
#  * Does not reproject data if spatialRef is different from FC
#  * currently an exception is thrown if we can't parse the date.  Is there a better way?
#  * Do I need to verify the output workspace/data?
#     not if called as from toolbox, but probably if called from a command line.

#Matches string as returned by Field.Type to the type code desired by gp.AddField()
typeMap = {"SmallInteger" : "SHORT",
           "Integer" : "LONG",
           "Single" : "FLOAT",
           "Double" : "DOUBLE",
           "String" : "TEXT",
           "Date" : "DATE",
           "OID" : "LONG",      #Not usually creatable with AddField() - use with Caution
           "Geometry" : "BLOB", #Not usually creatable with AddField() - use with Caution
           "BLOB" : "BLOB"}

# Import system modules
import sys, string, os, arcgisscripting, datetime

#Create the geoprocessing objectf
gp = arcgisscripting.create(9.3)

gp.Overwriteoutput = 1

# Input feature class
inFeatureClass = gp.GetParameterAsText(0)

#describe the input features (to get the spatial reference and the type of the idField)
inFcDescription = gp.Describe(inFeatureClass)

# Output feature class
outFeatureClass = gp.GetParameterAsText(1)
outPath, outName = os.path.split(outFeatureClass)
#FIXME - Do I need to verify the output workspace/data
#not if called as from toolbox, but probably if called from a command line.

# Field Names in input data
idField = gp.GetParameterAsText(2)
inDateField = gp.GetParameterAsText(3)

# Verify Field Names
idFieldType = ""
isDateField = False
for field in inFcDescription.Fields:
    if field.Name == idField:
        idFieldType = typeMap[field.Type]
    if field.Name == inDateField:
        if field.Type.lower() == "date":
            isDateField = True

if idFieldType == "":
    msg = idField + " was not found in " + inFeatureClass
    gp.AddError(msg)
    raise ValueError("Error: " + msg)

#gp.AddMessage("idFieldType = " + idFieldType)

if not isDateField:
    msg = inDateField + " was not found in " + inFeatureClass + " or is not a date field."
    gp.AddError(msg)
    raise ValueError("Error: " + msg)

# Spatial Reference
#spatialRef = gp.GetParameter(4)
#if spatialRef == None:
#    gp.AddMessage("No output spatial reference provided, using the spatial reference of " + inFeatureClass)
spatialRef = inFcDescription.SpatialReference
if spatialRef == None:
    msg = "Feature class " + inFeatureClass + " has no Spatial Reference"
    gp.AddError(msg)
    raise ValueError("Error: " + msg)

if spatialRef.Type != "Projected":
    msg = "Spatial Reference " + spatialRef.Name + " is not projected"
    gp.AddError(msg)
    raise ValueError("Error: " + msg)
    
# Field Names for output FC
outDateField1 = gp.GetParameterAsText(4)
if outDateField1 == "":
    outDateField1 = "StartDate"
outDateField2 = gp.GetParameterAsText(5)
if outDateField2 == "":
    outDateField2 = "EndDate"
durationField = gp.GetParameterAsText(6)
if durationField == "":
    durationField = "Timespan_H"
speedField = gp.GetParameterAsText(7)
if speedField == "":
    speedField = "Speed_MtPH"

shapeField = inFcDescription.ShapeFieldName

#gp.AddMessage("Sucessfully checked the input parameters")

class MyPoint:
    pass
pt1 = MyPoint()

def getDate(date):
    #ArcObjects delivers the date to python as a string with or without a time.
    #I sure hope the formatting stays constant.
    try:
        mydate = datetime.datetime.strptime(date, "%m/%d/%Y %I:%M:%S %p")
    except ValueError:
        try:
            mydate = datetime.datetime.strptime(date, "%m/%d/%Y")
        except ValueError:
            mydate = None
            msg = "Unable to parse " + date + "into a date object"
            gp.AddWarning(msg)
            raise ValueError(msg)
    return mydate

def getXY(geom):
    try:
        if (geom == None) or (geom.Type != "point"):
            return (None,None)
        return (geom.getpart(0).X, geom.getpart(0).Y)
    except AttributeError:
        # couldn't get the coordinate data, so return None
        return (None,None)

def copyPoint(pt1,pt2):
    pt1.id = pt2.GetValue(idField)
    pt1.date = pt2.GetValue(inDateField)
    pt1.x, pt1.y = getXY(pt2.GetValue(shapeField))
        
def newLine(x1,y1,x2,y2):
    if (x1 == x2) and (y1 == y2):
        gp.AddWarning("Adjacent points are the same.  Cannot create line with length = 0")
        return None
    if (x1 == None) or (y1 == None) or (x2 == None) or (y2 == None):
        gp.AddWarning("One or more of the points is invalid")
        return None
    pts = gp.createobject("Array")
    pt1 = gp.CreateObject("Point")
    pt1.X = x1
    pt1.Y = y1
    pts.add(pt1)
    pt2 = gp.CreateObject("Point")
    pt2.X = x2
    pt2.Y = y2
    pts.add(pt2)
    line = gp.createobject("geometry", "polyline", pts)
    if (line == None) or (line.FirstPoint == None) or (line.LastPoint == None):
        return None
    return line

def addLine(lines, pt1, pt2):
    # Create Geometry
    x2,y2 = getXY(pt2.GetValue(shapeField))
    geom = newLine(pt1.x, pt1.y, x2, y2)
    if geom == None:
        msg = "Unable to draw a line for " + pt1.id + " from " + pt1.date + " to " + pt2.GetValue(inDateField)
        gp.AddWarning(msg)
        return None
    
    #Get the time span (in hours)
    date2 = pt2.GetValue(inDateField)
    try:
        diff = getDate(date2) - getDate(pt1.date)
        hours = diff.days * 24 + diff.seconds/3600.0
    except ValueError:
        hours = 0    

    #Set the speed (in units per hour)
    if hours == 0:
        speed = -1
    else:
        speed = geom.Length/hours
        
    #gp.AddMessage("ID = " +  pt1.id + ", date1 = " + pt1.date + ", date2 = " + date2 + ", hours = " + str(hours) + ", distance = " + str(geom.Length) + ", speed = " + str(speed))

    # Create a new line feature
    line = lines.NewRow()
                      
    # Add the new attributes to the feature.
    line.setValue(outShapeField, geom)
    line.SetValue(idField, pt1.id)
    line.SetValue(outDateField1, pt1.date)
    line.SetValue(outDateField2, date2)
    line.setValue(durationField, hours)
    line.SetValue(speedField, speed)

    # Add the new feature to the feature class
    lines.insertRow(line)

try:
    # Process: Create Feature Class...
    gp.CreateFeatureclass_management(outPath, outName, "POLYLINE", "", "DISABLED", "DISABLED", spatialRef, "", "0", "0", "0")

    #gp.AddMessage("Sucessfully created the output feature class")
    
    # Process: Add Fields...
    gp.AddField_management(outFeatureClass, idField, idFieldType, "", "", "", "", "NON_NULLABLE", "REQUIRED", "")
    gp.AddField_management(outFeatureClass, outDateField1, "DATE", "", "", "", "", "NON_NULLABLE", "REQUIRED", "")
    gp.AddField_management(outFeatureClass, outDateField2, "DATE", "", "", "", "", "NON_NULLABLE", "REQUIRED", "")
    gp.AddField_management(outFeatureClass, durationField, "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    gp.AddField_management(outFeatureClass, speedField, "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    #gp.AddMessage("Sucessfully added the fields to the output feature class")

    outFCdesc = gp.describe(outFeatureClass)
    outShapeField = outFCdesc.ShapeFieldName

    lines = gp.InsertCursor(outFeatureClass)

    inDateFieldDelimited = gp.AddFieldDelimiters(inFeatureClass, inDateField)
    idFieldDelimited = gp.AddFieldDelimiters(inFeatureClass, idField)
    where = inDateFieldDelimited + " is not null and " + idFieldDelimited + " is not null"
    fields = idField +"; " + inDateField #Do I need to add Shape field? Yes if where and/or sort is null
    sort = idField +" A; " + inDateField + " A"
    #gp.AddMessage("Where = " + where + " Fields = " + fields + " Sort = " + sort)
    #FIXME - ESRI BUG - reprojection does not work if the data is in a FGDB and a sort order is given.
    #gp.AddMessage("Spatial Ref = " + spatialRef.Name)
    pts = gp.SearchCursor(inFeatureClass, where, spatialRef, fields, sort)

    firstpt = pts.Next()
    if firstpt == None:
        gp.AddMessage("There are no points in the input file.  Output Feature Class is empty.")
        sys.exit()

    # search cursor reuses the pointer to the feature, so I need to cache the first object
    # before calling Next(), lest I have two pointers to the same feature.
    copyPoint(pt1,firstpt)
    pt2 = pts.Next()
    while pt2 != None:
        if pt1.id == pt2.GetValue(idField):
            addLine(lines, pt1, pt2)
        copyPoint(pt1,pt2)
        pt2 = pts.Next()

    #flushes the input Cursor and closes the new FC
    del lines
except:
    if gp.GetMessages(2) != "":
        gp.AddError(gp.GetMessages(2))
    else:
        gp.AddError("Unknown Error: " + str(sys.exc_info()) )
