Derived Data Dependencies by Table
 - only those tables with derived data are listed
 - triggers (or stored procedures) need to be used to maintain the derived data when the source changes
 

CollarDataXXX
	Collar.*
	CollarFiles.*
	CollarParameters.*
	CollarParameterFiles.*
	??? records in these tables are immutable, and are simply the unaltered data from the files,
	    however the where the contents goes may be based on these parameters, i.e. Gen3 or Gen4
CollarFiles
	CollarFiles.*
	???
CollarFixes
	Collar.*
	CollarDataXXX.*
CollarParameters
	??? CollarParameterFiles.*
Locations
	CollarFixes.*
	CollarDeployments.*
	Collar.DisposalDate
	Animal.MortalityDate
Movements
	Locations.*

==============
Business Rules
==============


Collar Files
============

Column constraints
------------------

Collar
  - is a nullable key in the collars table
  - Can only be null for files which will be processed, i.e will have sub files with non-null collars
  -  (and as a special exception, ed-debevek files)
  -  (Debevek files should in the future be processed to collar specific sub files)
Project
  - is a non-null key in the projects table (determines where this file is visible in UI)
FileName
  - must be non-null and not empty string; purely informational
Status
  - is a non-null key in LookupCollarFileStatus
Content
  - must be non-null and is immutable
FileId/Username/UploadDate/Sha1Hash
  - are created/maintained by the DB, and cannot be inserted/updated
ParentFileId
  - is a nullable key in the collar file table.
  - It is inserted by the external file processors, and cannot be changed once inserted
  - Would be nice if the database could manage this - requires in DB processing of argos files
  - Special case: CSV files generated from Gen3 *.tpf files could have the parent file loaded after.
Format
  - Is a non-null key in LookupCollarFileFormat.
  - It is inserted by the user on creation and cannot be changed once inserted 
  - Getting this wrong will likely result in errors and no good fixes for this file 
  - Would be nice if the database could determine this from the contents, and disallow user input.

If a file has a non-null ParentFileId
  then it only the project & status can be updated, and only to mirror changes in the parent
  it can not be deleted, except when the parent is deleted or reprocessed
  it can not be inserted, except when the parent is (re)processed

Dependencies
------------
Collars: Collar
Projects: Project
LookupStatus: Status
LookupFormat: Format
CollarFiles: ParentFileId
  
Tables Dependent on CollarFiles
-------------------------------

CollarDataXXX: Contents, and Format (update: na; delete: cascade)
CollarFile: FileId (for files with a parent) (update: na; delete: cascade)
ArgosTransmissionSummary: Contents and Format   (update: na; delete: cascade)
CollarFixes: Status, Collar (and Contents via CollarDataXXX) (update: see below; delete: cascade)


Insert
------

Enforce column constraints
If Argos, summarize the transmissions by platform id and date range
If Argos, process to create/insert child files
Insert data in file format specific tables
If status is active, generate collar fixes from new data in format specific tables

Delete
------

Reverse insert

Updates
-------
Status: If the status changes, add/remove collarfixes for related data in format specific tables 
Collar: Only allowed when a file is inactive, since fixes for a file are dependent on knowing the collar of a file
Project: No effect on processing, will appear in a different project list
         Must ripple down to any sub files
FileName: Purely informational, user can change as desired.



ArgosFilePlatformDates
======================
This table is used to summarize a file without having to rescan it.
The summary information is used to determine if a file needs to be reprocessed (i.e.
if the platform to collar or collar to parameter mappings change).

The ProgramId and PlatformId are not foreign keys to the ArgosProgram and ArgosPlatform
tables, because we may load a file that does not have a program/platform in the database
We want this table to reflect what is in the file, not what is in the database,
We should provide a tool for checking database against the file and adding programs/platforms
as required.

This table is not dependent on anything beyond the contents (and format) of the related collar file.
Since the CollarFile contents/format are immutable, this table is also immutable.

Only the ArgosProcessor role can add records in this table - done when a file is processed.
(would be nice to do when the collarfile is added to the database).
Records cannot be updated or deleted.
Deletes will only happen as a cascade when the collarfile is deleted.
Inserts are done without a stored procedure, since access is controlled.


ArgosFileProcessingIssues
=========================
Issue will always happen on a collarFile.
If the collar file is deleted the related issues are also deleted (cascade)
The platform and collar fields are nullable foreign keys
They are used if the issue is related to a known platform/collar in the database.
They issue will be deleted/updated if the related platform/collar is deleted/updated.

The data in this table is highly dependent on the state of the database at the time
a file was processed. In particular, the platform to collar and collar to parameter
mappings and date ranges.

If a collarfile is reprocessed, all the existing issues are cleared, and new issues
(if any) are added to this table.

Only the ArgosProcessor role can add/deleted records in this table.
Should only be done when a file is processed.
Records cannot be updated.
Deletes will also happen as a cascade from deletes in related tables as discussed above.
Inserts and deletes are done without a stored procedure, since access is controlled.


