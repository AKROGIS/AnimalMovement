Derived Data Dependencies by Table
 - only those tables with derived data are listed
 - triggers (or stored procedures) need to be used to maintain the derived data when the
   source changes

Applications:
	ArgosDownloader
		DaysSinceLastDownload
		DownloadableAndAnalyzableCollars
			Days, Email, UserName, Password, PlatformId, ProjectId, CollarManufacturer,
			CollarId, SendNoEmails
		CollarFiles_insert
		ArgosDownloads_insert
		Settings
			Read system settings: sa_email_*, tdc_*
	ArgosProcessor
		UnprocessedArgosFiles
			FileId
		GetTelonicsParametersForArgosDates
			CollarManufacturer
			CollarId
			CollarModel
			PlatformId
			Gen3Period
			Contents
			Format
			StartDate
			EndDate
	
Functions/Procedures/Views used in applications, and thier dependencies:
	This does all the tables/columns used in the output and the where clause.
	Other columns may be used to join the tables, these columns should be obvious.
	
AnimalFixesByFile (view)
	CollarFixes
		CollarId
		FileId
		FixDate
	CollarDeployments
		AnimalId
		DeploymentDate
		RetreivalDate
	Projects
		ProjectName
	LookupCollarManufacturers
		Name
		
AnimalLocationSummary (TVF)
	Locations
		ProjectId
		AnimalId
		FixDate
		Location
		Status
		
CollarFixesByFile (TVF)
	CollarFiles
		CollarManufacturer
		CollarId
		FileId
		FileName
	CollarFixes
		CollarManufacturer
		CollarId
		FixDate
	LookupCollarFileStatus
		Name

CollarFixSummary (TVF)
	CollarFixes
		CollarManufacturer
		CollarId
		FixDate

ConflictingFixes (TVF)
	CollarFixes
		CollarManufacturer
		CollarId
		FixDate
		FixId, HiddenBy, FileId, LineNumber, Lat, Lon

DaysSinceLastDownload (SVF)
	ArgosDownloads
		ErrorMessage
		TimeStamp

DownloadableAndAnalyzableCollar (view)
	ArgosDownloads
		TimeStamp
		ErrorMessage
	ArgosPlatforms
		PlatformId
		Status
	ArgosPrograms
		UserName
		Password
		Status
		EndDate
	Collars
		CollarManufacturer
		CollarId
		CollarModel
		DisposalDate
		Gen3Period
	CollarDeployments
		ProjectId
		RetreivalDate
	CollarParameterFiles
		Contents
		FileId
		Format
		Status
	CollarParameters
		EndDate
	ProjectInvestigators
		Email
	Settings
		Value
		
GetTelonicsParametersForArgosDates (TVF)
	ArgosDeployments
		CollarManufacturer
		CollarId
		PlatformId
		StartDate
		EndDate
	Collars
		CollarModel
	CollarParameterFiles
		Contents
		FileName
		Format
	CollarParameters
		FileId
		Gen3Period
		StartDate
		EndDate
	
IsEditor (SVF)
	Projects
		ProjectId
		ProjectInvestigator
	ProjectEditors
		Editor

IsFixEditor (SVF)
	IsEditor
	CollarFiles
		Project
	CollarFixes
		FixId
	
NextAnimalId (SVF)
	Animals
		AnimalId
	Projects
		ProjectId

ProcessAllCollarsForArgosFile (SP)
	CollarFiles
		FileId
		Status
		Format
		ParentFileId
	Projects
		ProjectId
		ProjectInvestigator
	ProjectEditors
		ProjectId
		Editor	
	Settings
		Username, Key, Value
	* CollarFile_Delete SP
	* xp_cmdshell ArgosProcessor.exe

UnprocessedArgosFile (view)
	CollarFiles
		FileId
		FileName
		Format
		ParentFileId
		Project
		UploadDate
		UserName



CollarDataXXX
	Collar.*
	CollarFiles.*
	CollarParameters.*
	CollarParameterFiles.*
	??? records in these tables are immutable, and are simply the unaltered data from the
	    files, however the where the contents goes may be based on these parameters,
	    i.e. Gen3 or Gen4
CollarFiles
	CollarFiles.*
	???
CollarFixes
	Collar.*
	CollarDataXXX.*
CollarParameters
	??? CollarParameterFiles.*
Locations
	CollarFixes.*
	CollarDeployments.*
	Collar.DisposalDate
	Animal.MortalityDate
Movements
	Locations.*

==============
Business Rules
==============


Collar Files
============

Column constraints
------------------

Collar
  - is a nullable key in the collars table
  - Can only be null for files which will be processed, i.e will have sub files with
    non-null collars (and as a special exception, ed-debevek files - Debevek files should
    in the future be processed to collar specific sub files)
Project
  - is a nullable key in the projects table (determines where this file is visible in UI)
Owner
  - is a nullable key in the PI table (determines where this file is visible in UI)
  - one and only one of Project/Owner must be non=null. enforced by an insert trigger.
    if owner and project are both null, the uploading user is used as the owner.  this
    will fail unless the uploader is also a PI.
  - Owner is used when a file argos download or email upload will contain data for a
    number of collars, which might be spread across multiple projects.  Owner in this
    case really reflects the owner of the file, and not necessarily the owner of the
    collars or projects involved with the file.
FileName
  - must be non-null and not empty string; purely informational
Status
  - is a non-null key in LookupCollarFileStatus
Content
  - must be non-null and is immutable
FileId/Username/UploadDate/Sha1Hash
  - are created/maintained by the DB, and cannot be inserted/updated
ParentFileId
  - is a nullable key in the collar file table.
  - It is inserted by the external file processors, and cannot be changed once inserted
    (Would be nice if the database could manage this - requires processing of argos
    files entirely and only in the database.)
  - Special case: CSV files that were generated from Gen3 *.tpf files and loaded into the
    database, might in the future load the *.tpf files, in which case the parent would
    be loaded after the child.
Format
  - Is a non-null key in LookupCollarFileFormat.
  - It is inserted by the user on creation and cannot be changed once inserted 
  - Getting this wrong will likely result in errors and no good fixes for this file 
**  - Would be nice if the database could determine this from the contents, and disallow
      user input.

If a file has a non-null ParentFileId
  then only the project, owner & status can be updated, and only to mirror changes in the
  parent it can not be deleted, except when the parent is deleted or reprocessed
  it can not be inserted, except when the parent is (re)processed

Dependencies
------------
Collars: Collar
Projects: Project
ProjectInvestigators: Owner
LookupStatus: Status
LookupFormat: Format
CollarFiles: ParentFileId
  
Tables Dependent on CollarFiles
-------------------------------

CollarDataXXX: Contents, and Format (update: na; delete: cascade)
CollarFile: FileId (for files with a parent) (update: na; delete: cascade)
ArgosTransmissionSummary: Contents and Format   (update: na; delete: cascade)
CollarFixes: Status, Collar (and Contents via CollarDataXXX) (update: see below;
             delete: cascade)

*** implement cascading deletes on parentFileId and in collardataXXX this will greatly
simplify the delete SP.

Insert
------

Enforce column constraints
If Argos, summarize the transmissions by platform id and date range
If Argos, process to create/insert child files
Insert data in file format specific tables
If status is active, generate collar fixes from new data in format specific tables

Delete
------

Reverse of insert.  files that were downloaded cannot be deleted (by business decision
and enforced by foreign key constraint)

Updates
-------
Status: If the status changes, add/remove collarfixes for related data in format specific
        tables 
Collar: Only allowed when a file is inactive, since fixes for a file are dependent on
        knowing the collar of a file
Project: No effect on processing, will appear in a different project list
         Must ripple down to sub-files. must be null/not-null if owner is non-null/null
Owner: No effect on processing, will appear in a different PI List
       Must ripple down to sub-files. must be null/not-null if project is non-null/null
FileName: Purely informational, user can change as desired.



CollarDataXXX
=============
The data in these tables are not dependent on anything beyond the contents (and format)
of the related collar file.  Since the CollarFile contents/format are immutable, this
table is also immutable. Users cannot create/delete or update records in these tables.
These records are created by the database by calling an appropriate parser when a
collarfile is inserted into the database.  The data in these tables is related via
foreign key to the CollarFile table.  It will deny updates (the collarFileId does not
change), and will cascade deletes.  Changes to the collar file status does not change
the contents of these table, only the fixes derived from the collar data.



CollarParameters
================


CollarParameterFiles
====================



ArgosFilePlatformDates
======================
This table is used to summarize a file without having to rescan it.
The summary information is used to determine if a file needs to be reprocessed (i.e.
if the platform to collar or collar to parameter mappings change).

The ProgramId and PlatformId are not foreign keys to the ArgosProgram and ArgosPlatform
tables, because we may load a file that does not have a program/platform in the database
We want this table to reflect what is in the file, not what is in the database,
We should provide a tool for checking database against the file and adding programs/platforms
as required.

This table is not dependent on anything beyond the contents (and format) of the related collar file.
Since the CollarFile contents/format are immutable, this table is also immutable.

Only the ArgosProcessor role can add records in this table - done when a file is processed.
(would be nice to do when the collarfile is added to the database).
Records cannot be updated or deleted.
Deletes will only happen as a cascade when the collarfile is deleted.
Inserts are done without a stored procedure, since access is controlled.


ArgosFileProcessingIssues
=========================
Issues if they happen will always happen to a collarFile.
If the collar file is deleted the related issues are also deleted (cascade)
The platform and collar fields are nullable foreign keys
They are used if the issue is related to a known platform/collar in the database.
They issue will be deleted/updated if the related platform/collar is deleted/updated.

The data in this table is highly dependent on the state of the database at the time
a file was processed. In particular, the platform to collar and collar to parameter
mappings and date ranges.

If a collarfile is reprocessed, all the existing issues are cleared, and new issues
(if any) are added to this table.

Only the ArgosProcessor role can add/deleted records in this table.
Should only be done when a file is processed.
Records cannot be updated.
Deletes will also happen as a cascade from deletes in related tables as discussed above.
Inserts and deletes are done without a stored procedure, since access is controlled.


ArgosDownloads
==============
This table records the attempts, results, and errors associated with downloading
Argos data from the Argos server.  All records have a timestamp (automatically inserted)
column that records when the record was added to the database (immediately after
the download attempt finished).  Any timestamp provided by the client will be ignored.
If the client and the database are in different timezone and client cares about the
client time when the insert occured, then it is up to the client to determine the
offset and adjust the display appropriately. The records in this table represent a
snapshot in time - they are immutable and non-deletable.

Data is typically downloaded by the argos download service/scheduled task, run by a
local account on the server (ArgosProcessor role), however it may be useful to have
allow an editor to do a download when they are eager for new results.  For this reason,
we need to control access to the inserts on this table, and we will use a insert SP.
permission to run the SP will be based on being a limited to editors or ArgosProcessor.
No special permission check will be done for the insert, basically anyone editor
can log a download attempt, however the user will need to have permissions to upload
the results file, else an error may occur.

The platformId/programId columns are nullable columns that records the Argos
Platform or Program that was attempted to be downloaded. One and only one will be
non-null.  Typically, records will only be inserted in this table by the Argos-
Downloader application which will only try to download platforms or programs in the
database tables at the time it is run.  Therefore, these columns
can be used to join to other tables that have an Argos platform or program,
but it is not a Foriegn Key relation to these tables. This table represents what was
actually tried.  If a bogus platform/program was attempted this table
should not be corrected on a cascading update/delete if a platformId/programId in the
"related" table is updated or deleted.

This table will be consulted by the ArgosDownloader to determine the number of days
since the last successful download of a platform/program.  There is slight risk here
that a user may manually enter a bogus record in this table which could screw up the
download calculations, but lets trust our editors.

** Do we also want to capture the username and number of days requested in the download?

The ErrorMessage nullable varchar(max) and FileId nullable int represent the results.
They are mutually exclusive, and one and only one must be non-null.  We either get a file
or we get an error explaining why.  We do not allow the case, where we get a file, but
also want to record some error or observation during obtaining it.  We either succeed
or we fail.

The FileId is a nullable foreign key to the CollarFile table.  Because The downloads
occurred as a matter of historical fact, I have decided to not allow the deletion (i.e
forgetting or erasing the memory) of this event.  This means that the files associated
with this event cannot be deleted (they can be made inactive).  This seems appropriate,
as the files are generally small, and the data that is downloaded from the server
expires after 10 days, and cannot be retrieved at some later date.

Summary:
ArgosId, non null varchar(8), no FK relationship to ArgosPlatforms
ProgramId, non null varchar(8), no FK relationship to ArgosPlatforms
TimeStamp non-null datetime(2) default value provided
ErrorMessage null varchar(max) must be null if FileId is non-null and visaversa
FileId null int foreign key to CollarFiles, Cascade Update/Delete NO ACTION (deny)

The insert stored procedure is used to maintain the null/not-null requirement for
ErrorMessage/FileId and also the null/not-null requirement for platfrom/program Ids.
to always use the current time when doing the insert (any value passed by the
client will be ignored).


ArgosPrograms
=============
ProgramNumber, UserName:
** Can we change the ProgramNumber.  I think not.  What if we make a mistake?
It doesn't seem like it is used anywhere except in the ArgosPlatform table, so maybe it
won't hurt?  If we link the program to the ArgosDownload, then we should make the
programnumber and the username immutable.  This seems ok, unless we made a mistake, and
we didn't discover it until after we attempted a download.  Tricky...

Consider that the program number is not actually used anywhere (it could be used to
download all the data for a program), so for our current purposes, it is a meaningless
id number and can be updated as necessary.  The username is used when downloading,
and downloads will succeed or fail if this is correct or not.  if download 1 used a
username/password for a program, and failed, then the username/password were changed,
and then the next download succeeded, both downloads will point to the same program,
which would be confusing.

** We should hide the password from all but the owner of the program.  What is the best
way to store passwords in the database that the database needs to use as clear text?

Owner is a foreign key to ProjectInvestigator Table with cascade on update, and no
action on delete (i.e you cannot delete the PI if they own an ArgosProgram).  Allow PI
to re-assign this program to another PI.  

Name, start date, end date, and remarks are purely informational.

Status is Active/Inactive (via foreign key lookup).  When a program is inactive, 
neither the program or any of the platforms in that program will be downloaded.

Argos platforms are dependent on the program number.
The download tool uses this table to determine what to download, and how to authenticate.


ArgosPlatforms
==============
PlatformId varchar(8) NOT NULL - Primary Key
ProgramId varchar(8) NOT NULL - foreign key to ArgosPrograms
Status char(1) NOT NULL - Foreign Key to LookupStatus (Active/Inactive)
Remarks nvarchar(255) NULL - Informational content

This is a list of all the Argos Ids that are or were in a program.  The active platforms
in an active program will be downloaded on a regular basis.  The information in the
related program is used to authenticate with the Argos webservices.

The ProgramId foreign key has delete no action, so that a program cannot be deleted if
it has any platforms.  It has update cascade to stay synced with any corrections that
may happen with the program code (this may be prohibited by other requirements in the
database, but it is no problem here).

The platform is used by the ArgosDeployments, but not ArgosFilePlatformDates or
ArgosDownloads for the reasons given in the writeup on those tables.

Status is a time sensitive value, and indicates if the collar is currently downloadable.
status has nothing to do with whether is or can be deployed.

remarks is purely informational and can be changed as desired.

delete - will delete related deployments, warn if there are download for this platform,
as the files will not be able to be reprocessed.

update
 platformid - allowed, cascades to deployments.  if there are files with the new or old
              id, then files need to be reprocessed.  Check with ArgosFilePlatformDates
              and warn user if that files cannot be processed
 programid - can be changed to a valid program, but this may not make sense.  Is it
             possible to verify that a platform is (or was) in a program?
 status - will turn on/off future downloading of this platform.  no effect
          on how the collar is processed.  inactive collars can be deployed

insert - no special checks besides the column constraints above.

ArgosDeployments
================
	[DeploymentId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[PlatformId] [varchar](8) NOT NULL Foreign key to ArgosPlatforms
	[CollarManufacturer] [varchar](16) NOT NULL Foreign Key to Collars
	[CollarId] [varchar](16) NOT NULL Foreign Key to Collars
	[StartDate] [datetime2](7) NULL,
	[EndDate] [datetime2](7) NULL,

A collar can 0 or 1 Argos platform at any given time.
A ArgosPlatform can be deployed on 0 or 1 collars at any given time.

Inserts and update triggers will ensure that collars and platforms do not overlap.

Changes to this table may require a file to be reprocessed.  This can be
verified by checking with ArgosFilePlatformDates

A null startdate is considered unknown but very early,
A null enddate is considered to by unknown, but sometime in the distant future.
There can only be one deployment for a platform or collar with both start and end null.

The deployment id is used simply a meaningless primary key to help with updates and
deletes.

Platfrom and collar foreign keys are both delete no action (you cannot delete a collar
or a platform if it is deployed - first delete the deployment.  And they have 
update cascading.

These deployments behave nearly identical to animal/collar deployments, and most of the
triggers and stored procedures can be re-used.
 